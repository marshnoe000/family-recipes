openapi: 3.0.3

info:
  title: Family Recipes
  description: |-
    The purpose of Family Recipes is to make sharing recipes easier. Instead of asking for Grandmaâ€™s old chocolate chip cookie recipe that has been kept on the same piece of paper for decades, users can save and share recipes with their families and other groups from Family Recipes. Users are also able to view recipes shared with them from various groups in a format similar to social media. Family Recipes allows users to easily see recipes recommended by people they know and share their favorite recipes with others.
  version: 1.0.0

servers:
  - url: TBD

tags:
  - name: group
    description: Related to groups/families
  - name: post
    description: Related to posts on Family Recipes
  - name: recipe
    description: Related to recipes
  - name: user
    description: Related to users of Family Recipes

paths:

  /group/{groupId}:
    parameters:
      - name: groupId
        in: path
        description: ID of group to get
        required: true
        schema:
          type: integer
          format: int64
      - name: members
        in: query
        description: Whether group members should be included in response
        required: false
        schema:
          type: boolean
    get:
      tags:
        - group
      summary: Get group
      description: Get group
      operationId: getGroup
      responses:
        '200':
          description: Successfully got group
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/singleGroupRes'
        '404':
          description: Not found

  /group/{groupId}/users:
    parameters:
      - name: groupId
        in: path
        description: ID of group to get
        required: true
        schema:
          type: integer
          format: int64
    get:
      tags:
        - group
      summary: Get group members
      description: Get list of group members by groupId
      operationId: getGroupMembers
      responses:
        '200':
          description: Successfully got group members
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: string
                    description: Usernames of group members
                  status:
                    type: integer
                    format: int64

    post:
      tags:
        - group
      summary: Add user to group
      description: Add user to group
      operationId: addToGroup
      requestBody:
        $ref: '#/components/requestBodies/addToGroup'
      responses:
        '201':
          description: Successfully added user to group
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createRes'
    delete:
      parameters:
        - name: username
          in: query
          schema:
            type: string
          description: Username of user to remove from group, required
          required: true
      tags:
        - group
      summary: Remove a user from group
      description: Remove a user from the group
      operationId: removeFromGroup
      responses:
        '200':
          description: Successfully removed user from group
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deleteRes'


  /post:
    post:
      tags:
        - post
      summary: Create post
      description: Create a post
      operationId: createPost
      requestBody:
        $ref: '#/components/requestBodies/createPost'
      responses:
        '201':
          description: Successfully created post
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createRes'
        '400':
          description: Bad request

  /post/id/{postId}:
    parameters:
      - name: postId
        in: path
        description: ID of post to get
        required: true
        schema:
          type: integer
          format: int64
    get:
      tags:
        - post
      summary: Get post
      description: Get single post
      operationId: getSinglePost
      responses:
        '200':
          description: Successfully got post
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/singlePostRes'
        '404':
          description: Not found
    delete:
      tags:
        - post
      summary: Delete post
      description: Delete a post
      operationId: deleteSinglePost
      responses:
        '200':
          description: Successfully deleted post
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deleteRes'
        '404':
          description: Not found

  /post/u/{username}:
    parameters:
      - name: username
        in: path
        description: Username of user to get posts from
        required: true
        schema:
          type: string
    get:
      tags:
        - post
      summary: Get posts by user
      description: Get posts by user
      operationId: getUserPosts
      responses:
        '200':
          description: Successfully got posts
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/multiPostRes'
        '404':
          description: Not found

  /post/g/{groupId}:
    parameters:
      - name: groupId
        in: path
        description: ID of group to get posts from
        required: true
        schema:
          type: integer
          format: int64
    get:
      tags:
        - post
      summary: Get posts by group
      description: Get posts by group
      operationId: getGroupPosts
      responses:
        '200':
          description: Successfully got posts
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/multiPostRes'
        '404':
          description: Not found

  /recipe:
    get:
      tags:
        - recipe
      summary: Get recipe
      description: Get a recipe
      operationId: getRecipe
      responses:
        '200':
          description: Successfully got recipe
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/recipe'
        '404':
          description: Not found

  /user:
    get:
      tags:
        - user
      summary: Get user
      description: Get a user
      operationId: getUser
      responses:
        '200':
          description: Successfully got user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        '404':
          description: Not found

  /user/register:
    post:
      tags:
        - user
      summary: Register user
      description: Register a user
      operationId: registerUser
      requestBody:
        $ref: '#/components/requestBodies/register'
      responses:
        '201':
          description: Successfully registered user
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 201
components:

  schemas:

    group:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1234
        name:
          type: string
          description: Group name
          example: Cool Group
        description:
          type: string
          description: Group description
          example: This is a cool group
        createdDate:
          type: string
          format: date-time

    post:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1234
        author:
          type: string
          example: user1
        dateCreated:
          type: string
          format: date-time
        likes:
          type: integer
          format: int64
          description: Number of users who have liked the post
        recipeId:
          type: integer
          format: int64
          description: Id of recipe featured in post
          example: 1234
        tags:
          type: array
          items:
            type: string
            description: Tags to associate with the post

    recipe:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1234
        title:
          type: string
          example: Mac and Cheese
        description:
          type: string
          example: Delicious Mac and Cheese
        ingredients:
          type: array
          items:
            type: string
            description: Ingredients needed for recipe
        instructions:
          type: string
          example: Make the mac and cheese
        difficultyLevel:
          type: string
          description: Level of difficulty
          example: Easy
          enum:
            - Easy
            - Medium
            - Hard
            - Expert
        imageId:
          type: integer
          format: int64
          example: 1234
        foodType:
          type: string
          example: Pasta
        recipeSource:
          type: string

    user:
      type: object
      properties:
        username:
          type: string
          example: johndoe
        password:
          type: string
          example: password
        passwordSalt:
          type: string
          example: salt
        email:
          type: string
          example: fake@email.com
        name:
          type: string
          example: John Doe

    createRes:
      type: object
      properties:
        status:
          type: integer
          example: 200
        id:
          type: integer
          example: 1234

    deleteRes:
      type: object
      properties:
        status:
          type: integer
          example: 200
        rowsAffected:
          type: integer
          example: 1

    singlePostRes:
      type: object
      properties:
        status:
          type: integer
          example: 200
        data:
          type: object
          properties:
            id:
              type: integer
              format: int64
              example: 1234
            author:
              type: string
              example: user1
            dateCreated:
              type: string
              format: date-time
            likes:
              type: integer
              format: int64
              description: Number of users who have liked the post
            recipeId:
              type: integer
              format: int64
              description: Id of recipe featured in post
              example: 1234
            tags:
              type: array
              items:
                type: string
                description: Tags to associate with the post

    multiPostRes:
      type: object
      properties:
        status:
          type: integer
          example: 200
        data:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
                format: int64
                example: 1234
              author:
                type: string
                example: user1
              dateCreated:
                type: string
                format: date-time
              likes:
                type: integer
                format: int64
                description: Number of users who have liked the post
              recipeId:
                type: integer
                format: int64
                description: Id of recipe featured in post
                example: 1234
              tags:
                type: array
                items:
                  type: string
                  description: Tags to associate with the post

    singleGroupRes:
      type: object
      properties:
        status:
          type: integer
          example: 200
        data:
          type: object
          properties:
            id:
              type: integer
              format: int64
              example: 1234
            name:
              type: string
              description: Group name
              example: Cool Group
            description:
              type: string
              description: Group description
              example: This is a cool group
            createdDate:
              type: string
              format: date-time
            members:
              type: array
              items:
                type: string
                description: usernames of group members


    multiGroupRes:
      type: object
      properties:
        status:
          type: integer
          example: 200
        data:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
                format: int64
                example: 1234
              name:
                type: string
                description: Group name
                example: Cool Group
              description:
                type: string
                description: Group description
                example: This is a cool group
              createdDate:
                type: string
                format: date-time
              members:
                type: array
                items:
                  type: string
                  description: usernames of group members

    singleUserRes:
      type: object
      properties:
        status:
          type: integer
          example: 200

    multiUserRes:
      type: object
      properties:
        status:
          type: integer
          example: 200

    singleRecipeRes:
      type: object
      properties:
        status:
          type: integer
          example: 200

    multiRecipeRes:
      type: object
      properties:
        status:
          type: integer
          example: 200

  requestBodies:

    register:
      content:
        application/json:
          schema:
            type: object
            properties:
              username:
                type: string
                example: johndoe
              password:
                type: string
                example: password
              email:
                type: string
                example: fake@email.com
              name:
                type: string
                example: John Doe

    createPost:
      content:
        application/json:
          schema:
            type: object
            properties:
              authorId:
                type: integer
                format: int64
                example: 1234
              recipeId:
                type: integer
                format: int64
                example: 1234
              tags:
                type: array
                items:
                  type: string
                  description: Tags to associate with the post

    addToGroup:
      content:
        application/json:
          schema:
            type: object
            properties:
              username:
                type: string
                example: user12

